<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" xmlns:l="/lib/layout" xmlns:x="jelly:xml">
  <div id="dialogStatistic" title="Statistic" style='width: 750px;'>
    <h1>Measurement Statistic</h1>
    <table class="data-table">
      <tr>
        <th>Project</th>
        <th>Selected</th>
        <th>Measured</th>
        <th>Measured Changes</th>
        <j:forEach var="category" items="${it.getChangeClassificationArray()}">
          <j:if test="${!category.equals('TODO')}">
            <th>${category}</th>
          </j:if>
        </j:forEach>

      </tr>
      <j:forEach var="project" items="${it.getStatistic().entrySet()}">
        <tr>
          <td>
            <j:if test="${project.getKey().equals('Sum')}">
              <b>
                ${project.getKey()}
              </b>
            </j:if>
            <j:if test="${!project.getKey().equals('Sum')}">
              ${project.getKey()}
            </j:if>
          </td>
          <td>${project.getValue().getCommitsWithSourceChange() + project.getValue().getCommitsWithUnmeasured()}
            (${project.getValue().getTestsWithSourceChange() + project.getValue().getUnmeasuredTests()})
          </td>
          <td>${project.getValue().getCommitsWithSourceChange()} (${project.getValue().getTestsWithSourceChange()})</td>
          <td>${project.getValue().getCommitsWithChange()} (${project.getValue().getTestsWithChange()})</td>
          <j:forEach var="category" items="${it.getChangeClassificationArray()}">
            <j:if test="${!category.equals('TODO')}">
              <td>
                ${project.getValue().getCategoryCommitCount().get(category) == null ? 0 : project.getValue().getCategoryCommitCount().get(category)}
                (${project.getValue().getCategoryTestCount().get(category) == null ? 0 : project.getValue().getCategoryTestCount().get(category)})
              </td>
            </j:if>
          </j:forEach>
        </tr>
      </j:forEach>
    </table>
    <h1>Measurement Problem Statistic</h1>

    <table class="data-table">
      <tr>
        <th>Project</th>
        <th>Selected</th>
        <th>Unmeasured</th>
        <j:forEach var="category" items="${it.getUnmeasuredClassificationArray()}">
          <j:if test="${!category.equals('TODO')}">
            <th>${category}</th>
          </j:if>
        </j:forEach>

      </tr>
      <j:forEach var="project" items="${it.getStatistic().entrySet()}">
        <tr>
          <td>
            <j:if test="${project.getKey().equals('Sum')}">
              <b>
                ${project.getKey()}
              </b>
            </j:if>
            <j:if test="${!project.getKey().equals('Sum')}">
              ${project.getKey()}
            </j:if>
          </td>
          <td>${project.getValue().getCommitsWithSourceChange() + project.getValue().getCommitsWithUnmeasured()}
            (${project.getValue().getTestsWithSourceChange() + project.getValue().getUnmeasuredTests()})
          </td>
          <td>${project.getValue().getCommitsWithUnmeasured()} (${project.getValue().getUnmeasuredTests()})</td>
          <j:forEach var="category" items="${it.getUnmeasuredClassificationArray()}">
            <j:if test="${!category.equals('TODO')}">
              <td>
                ${project.getValue().getCategoryCommitCount().get(category) == null ? 0 : project.getValue().getCategoryCommitCount().get(category)}
                (${project.getValue().getCategoryTestCount().get(category) == null ? 0 : project.getValue().getCategoryTestCount().get(category)})
              </td>
            </j:if>
          </j:forEach>
        </tr>
      </j:forEach>
    </table>
    <j:set var="sum" value="${it.getStatistic().get('Sum')}" />
    Values in parenthesis are the count of tests, the values before are the count of commits. For example, in sum,
    <b>
      ${sum.getCommitsWithSourceChange() + sum.getCommitsWithUnmeasured()}
    </b>
    commits have been measured (or tried to measure) and
    <b>
      ${project.getValue().getTestsWithSourceChange() + project.getValue().getUnmeasuredTests()}
    </b>
    tests have been measured (or tried to measure) in those commits.
  </div>
  <script>
    jq$("#dialogStatistic").dialog({ autoOpen: false });
  </script>
</j:jelly>